// Autogenerated from Pigeon (v22.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
        listOf(
            exception.code,
            exception.message,
            exception.details
        )
    } else {
        listOf(
            exception.javaClass.simpleName,
            exception.toString(),
            "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
        )
    }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()

private open class AgeSdkPigeonCodec : StandardMessageCodec() {
    override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
        return super.readValueOfType(type, buffer)
    }

    override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
        super.writeValue(stream, value)
    }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface AgeSdkApi {
    fun getAge(callback: (Result<Long?>) -> Unit)

    companion object {
        /** The codec used by AgeSdkApi. */
        val codec: MessageCodec<Any?> by lazy {
            AgeSdkPigeonCodec()
        }

        /** Sets up an instance of `AgeSdkApi` to handle messages through the `binaryMessenger`. */
        @JvmOverloads
        fun setUp(binaryMessenger: BinaryMessenger, api: AgeSdkApi?, messageChannelSuffix: String = "") {
            val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
            run {
                val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sunmi_sdk.AgeSdkApi.getAge$separatedMessageChannelSuffix", codec)
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        api.getAge { result: Result<Long?> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                val data = result.getOrNull()
                                reply.reply(wrapResult(data))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
        }
    }
}
