// Autogenerated from Pigeon (v22.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class SaleRequest {
  SaleRequest({
    this.amount,
    this.currencyCode,
    this.documentNr,
  });

  int? amount;

  String? currencyCode;

  String? documentNr;

  Object encode() {
    return <Object?>[
      amount,
      currencyCode,
      documentNr,
    ];
  }

  static SaleRequest decode(Object result) {
    result as List<Object?>;
    return SaleRequest(
      amount: result[0] as int?,
      currencyCode: result[1] as String?,
      documentNr: result[2] as String?,
    );
  }
}

class SaleResponse {
  SaleResponse({
    this.status,
    this.message,
  });

  String? status;

  String? message;

  Object encode() {
    return <Object?>[
      status,
      message,
    ];
  }

  static SaleResponse decode(Object result) {
    result as List<Object?>;
    return SaleResponse(
      status: result[0] as String?,
      message: result[1] as String?,
    );
  }
}

class RefundRequest {
  RefundRequest({
    this.refundAmount,
    this.currencyCode,
    this.documentNr,
    this.stan,
    this.transactionDate,
    this.rrn,
    this.skipReceiptPrint,
    this.skipCustomerReceiptPrint,
  });

  int? refundAmount;

  String? currencyCode;

  String? documentNr;

  String? stan;

  String? transactionDate;

  String? rrn;

  bool? skipReceiptPrint;

  bool? skipCustomerReceiptPrint;

  Object encode() {
    return <Object?>[
      refundAmount,
      currencyCode,
      documentNr,
      stan,
      transactionDate,
      rrn,
      skipReceiptPrint,
      skipCustomerReceiptPrint,
    ];
  }

  static RefundRequest decode(Object result) {
    result as List<Object?>;
    return RefundRequest(
      refundAmount: result[0] as int?,
      currencyCode: result[1] as String?,
      documentNr: result[2] as String?,
      stan: result[3] as String?,
      transactionDate: result[4] as String?,
      rrn: result[5] as String?,
      skipReceiptPrint: result[6] as bool?,
      skipCustomerReceiptPrint: result[7] as bool?,
    );
  }
}

class VoidRequest {
  VoidRequest({
    this.operationId,
    this.partialVoidAmount,
    this.skipReceiptPrint,
    this.skipCustomerReceiptPrint,
  });

  String? operationId;

  int? partialVoidAmount;

  bool? skipReceiptPrint;

  bool? skipCustomerReceiptPrint;

  Object encode() {
    return <Object?>[
      operationId,
      partialVoidAmount,
      skipReceiptPrint,
      skipCustomerReceiptPrint,
    ];
  }

  static VoidRequest decode(Object result) {
    result as List<Object?>;
    return VoidRequest(
      operationId: result[0] as String?,
      partialVoidAmount: result[1] as int?,
      skipReceiptPrint: result[2] as bool?,
      skipCustomerReceiptPrint: result[3] as bool?,
    );
  }
}

class CloseDocumentRequest {
  CloseDocumentRequest({
    this.documentNr,
    this.operationIdList,
    this.skipReceiptPrint,
    this.skipCustomerReceiptPrint,
  });

  String? documentNr;

  List<String>? operationIdList;

  bool? skipReceiptPrint;

  bool? skipCustomerReceiptPrint;

  Object encode() {
    return <Object?>[
      documentNr,
      operationIdList,
      skipReceiptPrint,
      skipCustomerReceiptPrint,
    ];
  }

  static CloseDocumentRequest decode(Object result) {
    result as List<Object?>;
    return CloseDocumentRequest(
      documentNr: result[0] as String?,
      operationIdList: (result[1] as List<Object?>?)?.cast<String>(),
      skipReceiptPrint: result[2] as bool?,
      skipCustomerReceiptPrint: result[3] as bool?,
    );
  }
}

class RefundResponse {
  RefundResponse({
    this.operationId,
    this.cryptogram,
    this.documentNr,
    this.amountAuthorized,
    this.amountAdditional,
    this.authCode,
    this.rrn,
    this.stan,
    this.cardType,
    this.state,
    this.receiptText,
    this.actionCode,
  });

  String? operationId;

  String? cryptogram;

  String? documentNr;

  int? amountAuthorized;

  int? amountAdditional;

  String? authCode;

  String? rrn;

  String? stan;

  String? cardType;

  String? state;

  String? receiptText;

  String? actionCode;

  Object encode() {
    return <Object?>[
      operationId,
      cryptogram,
      documentNr,
      amountAuthorized,
      amountAdditional,
      authCode,
      rrn,
      stan,
      cardType,
      state,
      receiptText,
      actionCode,
    ];
  }

  static RefundResponse decode(Object result) {
    result as List<Object?>;
    return RefundResponse(
      operationId: result[0] as String?,
      cryptogram: result[1] as String?,
      documentNr: result[2] as String?,
      amountAuthorized: result[3] as int?,
      amountAdditional: result[4] as int?,
      authCode: result[5] as String?,
      rrn: result[6] as String?,
      stan: result[7] as String?,
      cardType: result[8] as String?,
      state: result[9] as String?,
      receiptText: result[10] as String?,
      actionCode: result[11] as String?,
    );
  }
}

class VoidResponse {
  VoidResponse({
    this.operationId,
    this.cryptogram,
    this.documentNr,
    this.amountAuthorized,
    this.amountAdditional,
    this.authCode,
    this.rrn,
    this.stan,
    this.cardType,
    this.state,
    this.receiptText,
  });

  String? operationId;

  String? cryptogram;

  String? documentNr;

  int? amountAuthorized;

  int? amountAdditional;

  String? authCode;

  String? rrn;

  String? stan;

  String? cardType;

  String? state;

  String? receiptText;

  Object encode() {
    return <Object?>[
      operationId,
      cryptogram,
      documentNr,
      amountAuthorized,
      amountAdditional,
      authCode,
      rrn,
      stan,
      cardType,
      state,
      receiptText,
    ];
  }

  static VoidResponse decode(Object result) {
    result as List<Object?>;
    return VoidResponse(
      operationId: result[0] as String?,
      cryptogram: result[1] as String?,
      documentNr: result[2] as String?,
      amountAuthorized: result[3] as int?,
      amountAdditional: result[4] as int?,
      authCode: result[5] as String?,
      rrn: result[6] as String?,
      stan: result[7] as String?,
      cardType: result[8] as String?,
      state: result[9] as String?,
      receiptText: result[10] as String?,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();

  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is SaleRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is SaleResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is RefundRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is VoidRequest) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is CloseDocumentRequest) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is RefundResponse) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is VoidResponse) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return SaleRequest.decode(readValue(buffer)!);
      case 130:
        return SaleResponse.decode(readValue(buffer)!);
      case 131:
        return RefundRequest.decode(readValue(buffer)!);
      case 132:
        return VoidRequest.decode(readValue(buffer)!);
      case 133:
        return CloseDocumentRequest.decode(readValue(buffer)!);
      case 134:
        return RefundResponse.decode(readValue(buffer)!);
      case 135:
        return VoidResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class SunmiSdkApi {
  /// Constructor for [SunmiSdkApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SunmiSdkApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<RefundResponse> initiateRefund(
      String documentNr, int refundAmount, String stan, String rrn, String currencyCode, bool skipReceiptPrint, bool skipCustomerReceiptPrint) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sunmi_sdk.SunmiSdkApi.initiateRefund$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[documentNr, refundAmount, stan, rrn, currencyCode, skipReceiptPrint, skipCustomerReceiptPrint]) as List<Object?>?;

    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as RefundResponse?)!;
    }
  }

  Future<VoidResponse> initiateVoid(String operationId, int partialVoidAmount, bool skipReceiptPrint, bool skipCustomerReceiptPrint) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sunmi_sdk.SunmiSdkApi.initiateVoid$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[operationId, partialVoidAmount, skipReceiptPrint, skipCustomerReceiptPrint]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as VoidResponse?)!;
    }
  }

  Future<void> closeDocument(String documentNr, List<String> operationIdList, bool skipReceiptPrint, bool skipCustomerReceiptPrint) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sunmi_sdk.SunmiSdkApi.closeDocument$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[documentNr, operationIdList, skipReceiptPrint, skipCustomerReceiptPrint]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> printPlaintext(String text) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sunmi_sdk.SunmiSdkApi.printPlaintext$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel.send(<Object?>[text]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setApplicationMode(String apiKey, String mode) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sunmi_sdk.SunmiSdkApi.setApplicationMode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel.send(<Object?>[apiKey, mode]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<SaleResponse> startCardPayment(SaleRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sunmi_sdk.SunmiSdkApi.startCardPayment$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as SaleResponse?)!;
    }
  }
}
